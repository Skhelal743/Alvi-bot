const axios = require("axios");

module.exports = {
  config: {
    name: "jan",
    version: "1.4.0",
    author: "Aminulsordar",
    countDown: 0,
    role: 0,
    shortDescription: "Jan AI ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü",
    longDescription: "Jan AI ‡¶¨‡¶ü ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶∂‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§",
    category: "jan",
    guide: "{pn} <message>\n{pn} teach <question> - <answer>\n{pn} count"
  },

  async fetchCount() {
    try {
      const response = await axios.get(`https://jan-api-by-aminul-sordar.vercel.app/count`);
      return response.data;
    } catch (error) {
      return { questions: 0, answers: 0 };
    }
  },

  async getAnswer(question) {
    try {
      const response = await axios.get(`https://jan-api-by-aminul-sordar.vercel.app/answer/${encodeURIComponent(question)}`);
      return response.data.answer || "‚ùå ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶è‡¶ü‡¶æ ‡¶∂‡¶ø‡¶ñ‡¶ø‡¶®‡¶ø, ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶∂‡ßá‡¶ñ‡¶æ‡¶®! üëÄ";
    } catch (error) {
      return "‚ùå ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø, ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®!";
    }
  },

  async teachMultiple(qaText) {
    try {
      const response = await axios.post(`https://jan-api-by-aminul-sordar.vercel.app/teach`, { text: qaText });
      return response.data.message;
    } catch (error) {
      return "‚ùå ‡¶∂‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§";
    }
  },

  onReply: async function ({ api, event }) {
    const reply = event.body.trim();
    const responseMessage = await this.getAnswer(reply);

    await api.sendMessage(responseMessage, event.threadID, (error, info) => {
      if (!error) {
        global.GoatBot.onReply.set(info.messageID, {
          commandName: this.config.name,
          type: "reply",
          messageID: info.messageID,
          author: event.senderID
        });
      }
    }, event.messageID);
  },

  onStart: async function ({ api, args, event }) {
    if (args.length < 1) {
      return api.sendMessage("‚ùå ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®!", event.threadID, event.messageID);
    }

    const command = args[0].toLowerCase();

    if (command === "count") {
      const countData = await this.fetchCount();
      return api.sendMessage(
        `üìä ‡¶ú‡ßç‡¶û‡¶æ‡¶®‡¶≠‡¶æ‡¶£‡ßç‡¶°‡¶æ‡¶∞:\n\n` +
        `üìå ‡¶Æ‡ßã‡¶ü ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ${countData.questions}\n` +
        `üìå ‡¶Æ‡ßã‡¶ü ‡¶â‡¶§‡ßç‡¶§‡¶∞: ${countData.answers}\n\n` +
        `üí° ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Ü‡¶∞‡¶ì ‡¶∂‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Ü‡¶∞‡¶ì ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶¨‡¶æ‡¶®‡¶æ‡¶®!\n` +
        `üîç ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ‡¶∞!`,
        event.threadID, event.messageID
      );
    }

    if (command === "teach") {
      const input = args.slice(1).join(" ").trim();
      if (!input.includes(" - ")) {
        return api.sendMessage("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®:\n/teach question - answer\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® '|'-‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá", event.threadID, event.messageID);
      }

      const responseMessage = await this.teachMultiple(input);
      return api.sendMessage(responseMessage, event.threadID, event.messageID);
    }

    const input = args.join(" ").trim();
    const responseMessage = await this.getAnswer(input);

    await api.sendMessage(responseMessage, event.threadID, (error, info) => {
      if (!error) {
        global.GoatBot.onReply.set(info.messageID, {
          commandName: this.config.name,
          type: "reply",
          messageID: info.messageID,
          author: event.senderID
        });
      }
    }, event.messageID);
  },

  onChat: async function ({ api, event }) {
    try {
      const body = event.body ? event.body.toLowerCase().trim() : "";

      const prefixes = ["baby", "bby", "bot", "jan", "babu", "janu"];
      const startsWithPrefix = prefixes.find(prefix => body.startsWith(prefix));

      if (startsWithPrefix) {
        const question = body.replace(/^\S+\s*/, "").trim();

        if (question.length > 0) {
          const responseMessage = await this.getAnswer(body);
          return api.sendMessage(responseMessage, event.threadID, (error, info) => {
            if (!error) {
              global.GoatBot.onReply.set(info.messageID, {
                commandName: this.config.name,
                type: "reply",
                messageID: info.messageID,
                author: event.senderID
              });
            }
          }, event.messageID);
        }

        const randomReplies = [
          "üòö",
          "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å üòÄ, ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶õ‡¶ø",
          "‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßã?",
          "‡¶¨‡¶≤‡ßã ‡¶ú‡¶æ‡¶® ‡¶ï‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø",
          `‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¨‡¶≤‡ßá‡¶õ‡ßã: "${body}"? ‡¶ï‡¶ø‡¶â‡¶ü!`
        ];
        const randomReply = randomReplies[Math.floor(Math.random() * randomReplies.length)];
        return api.sendMessage(randomReply, event.threadID, event.messageID);
      }
    } catch (err) {
      console.error("onChat error:", err);
    }
  }
};
